#+title: Scratch

Оригинальная грамматика:

#+begin_example
Grammar -> Axiom Rules
Axiom -> LB AXIOM LB Nt RB RB
Rules -> Rule Rules
Rules -> ε
Rule -> LB Nt Rhs RB
Nt -> NONTERM
Rhs -> Productions RhsTail
RhsTail -> Productions RhsTail
RhsTail -> ε
Productions -> LB ProductionsBody RB
ProductionsBody -> ε
ProductionsBody -> TERM ProductionsBody
ProductionsBody -> NONTERM ProductionsBody
#+end_example

Грамматика арифметических выражений:

#+begin_example
% аксиома
[axiom [E]]
% правила грамматики
[E    [T E']]
[E'   [+ T E'] []]
[T    [F T']]
[T'   [* F T'] []]
[F    [n] [( E )]]
#+end_example

Грамматика на входном языке:

#+begin_example
[axiom [GRAMMAR]]
[GRAMMAR [AXIOM RULES]]
[AXIOM [lb "axiom" lb NT rb rb]]
[RULES [RULE RULES] []]
[RULE [lb NT RHS rb]]
[NT [nonterm]]
[RHS [PRODUCTIONS RHSTAIL]]
[RHSTAIL [PRODUCTIONS RHSTAIL] []]
[PRODUCTIONS [lb PRODUCTIONSBODY rb]]
[PRODUCTIONSBODY [term PRODUCTIONSBODY] [nonterm PRODUCTIONSBODY] []]
#+end_example


1. [X] Переписывание грамматики входного языка на самом входном языке.
2. [ ] Добавление в программу, написанную на лабораторной работе 2.3, генератора
   таблицы разбора на основе дерева разбора. Таблица разбора должна представлять
   собой инициализированный двумерный массив на рабочем языке (он совпадает с
   языком реализации генератора компиляторов). Запрещается использовать JSON или
   иные механизмы сериализации.
3. [ ] Тестирование генератора компиляторов путём написания простейшего
   калькулятора арифметических выражений на основе грамматики, описанной в
   индивидуальном варианте.
4. [ ] Раскрутка генератора компиляторов путём подачи на вход грамматики
   входного языка, написанной на самом входном языке (пункт 1). и замены таблицы
   разбора, написанной вручную, на сгенерированную таблицу разбора. Генератор
   компиляторов и калькулятор арифметических выражений должны быть различными
   программами.

Отметим, что парсер входного языка должен выдавать сообщения об обнаруженных
ошибках, включающие координаты ошибки. Восстановление при ошибках, а также
выдачу специфичных текстовых описаний ошибок реализовывать не нужно.

Кроме того, генератор компиляторов должен уметь обнаруживать следующие ошибки в
грамматике (с указанием координаты ошибки):

- наличие нетерминального символа, не присутствующего в левой части ни одного
  правила;
- грамматика не относится к классу LL(1)-грамматик;
- не указана аксиома грамматики;
- указано более одной аксиомы грамматики;
- используется необъявленный символ или символ объявлен дважды (для вариантов
  входных языков, подразумевающих обязательное объявление терминальных и/или
  нетерминальных символов);
