*$FROM LibraryEx
$EXTERN Map;

/* t.Token ::= (s.Domain t.Position t.Position e.Attr) */
/* s.Domain ::= s.WORD */
/* t.Position ::= (s.Line s.Column) */
/* s.Line ::= s.NUMBER */
/* s.Column ::= s.NUMBER */
/* e.Attr = e.ANY */

/* t.Error ::= (s.CHAR+) */

$ENTRY Go {
    /* empty */
    , <Tokenize <ReadAll>>
    : {
        (e.Tokens) e.Errors = <Map lexer_Println <Map lexer_TokenToString e.Tokens>>;
    };
}

$ENTRY lexer_Println {
    (e.1) = <Prout e.1>;
}

ReadAll {
    /* empty */ = <ReadAll <Card>>;
    e.Text 0 = e.Text;
    e.Text = <ReadAll e.Text '\n' <Card>>;
}

/* <Tokenize e.Text> == (t.Token*) t.Error* */
Tokenize {
    e.Text = <DoTokenize e.Text () () (1 1)>;
}

DoTokenize {
    '' (e.Tokens) (e.Errors) t.Position = (e.Tokens) e.Errors;
    e.Text (e.Tokens) (e.Errors) t.Position
    , e.Text
    : {
        s.First e.Other
            , '\n\t '
            : e.1 s.First e.2
            = <DoTokenize e.Other (e.Tokens) (e.Errors) <Move s.First t.Position>>;
        s.P e.Value s.P e.Other
            , '\'\"'
            : e.1 s.P e.2
            , <EndsWith '\\' e.Value>
            : False
            = <DoTokenize e.Other (e.Tokens <MakeToken "STR" t.Position e.Value>) (e.Errors) <Move s.P e.Value s.P t.Position>>;
        s.First e.Other
            , '{}<>()=;:,'
            : e.1 s.First e.2
            = <DoTokenize e.Other (e.Tokens <MakeToken <GetSymbolDomain s.First> t.Position s.First>) (e.Errors) <Move s.First t.Position>>;
        e.Comment e.Other
            , e.Comment
            : '/''*' e.Inner '*''/'
            = <DoTokenize e.Other (e.Tokens) (e.Errors) <Move e.Comment t.Position>>;
        e.Var e.Other
            , <IsVar e.Var>
            : True
            , <StartsWithOrEmpty '\t\n {}<>()=\'\";:,' (e.Other)>
            : True
            = <DoTokenize e.Other (e.Tokens <MakeToken "VAR" t.Position e.Var>) (e.Errors) <Move e.Var t.Position>>;
        e.Ident e.Other
            , <IsIdent e.Ident>
            : True
            , <StartsWithOrEmpty '\t\n {}<>()=\'\";:,' (e.Other)>
            : True
            = <DoTokenize e.Other (e.Tokens <MakeToken "IDENT" t.Position e.Ident>) (e.Errors) <Move e.Ident t.Position>>;
        e.Number e.Other
            , <IsNumber e.Number>
            : True
            , <StartsWithOrEmpty '\t\n {}<>()=\'\";:,' (e.Other)>
            : True
            = <DoTokenize e.Other (e.Tokens <MakeToken "NUMBER" t.Position e.Number>) (e.Errors) <Move e.Number t.Position>>;
    };
}

EndsWith {
    s.EndsWith e.Text
        , e.Text
        : e.1 s.EndsWith
        = True;
    e.Else = False;
}

StartsWithOrEmpty {
    e.StartsWithOrEmpty (s.First e.Rest)
        , e.StartsWithOrEmpty
        : e.1 s.First e.2
        = True;
    e.StartsWithOrEmpty () = True;
    e.Else = False;
}

IsType {
    s.Symbol
        , 'set'
        : e.1 s.Symbol e.2
        = True;
    e.Other = False;
}

$ENTRY IsVar {
    s.Type '.' e.Rest
        , <IsType s.Type>
        : True
        , <IsIdent e.Rest> <IsNumber e.Rest>
        : e.1 True e.2
        = True;
    e.Other = False;
}

$ENTRY IsIdent {
    s.First e.Rest
        , <IsAlpha s.First>
        : True
        , <All IsIdentSymb e.Rest>
        : True
        = True;
    e.Else = False;
}

$ENTRY IsIdentSymb {
    s.Symb, <IsNumber s.Symb> : True = True;
    s.Symb, <IsAlpha s.Symb> : True = True;
    s.Symb, '_-' : e.1 s.Symb e.2 = True;
    e.Else = False;
}

All {
    s.Pred e.Elements
        , <Map s.Pred e.Elements> : e.1 False e.2 = False;
    e.Else = True;
}

$ENTRY IsNumber {
    s.Symb
    , <Ord s.Symb>
    : {
        s.N
            , <Compare s.N <- <Ord '0'> 1>>
            : '+'
            , <Compare s.N <+ <Ord '9'> 1>>
            : '-'
            = True;
        s.Else = False;
    };
    e.Else = False;
}

$ENTRY IsAlpha {
    s.Symb
    , <Ord s.Symb>
    : {
        s.N
            , <Compare s.N <- <Ord 'a'> 1>>
            : '+'
            , <Compare s.N <+ <Ord 'z'> 1>>
            : '-'
            = True;
        s.N
            , <Compare s.N <- <Ord 'A'> 1>>
            : '+'
            , <Compare s.N <+ <Ord 'Z'> 1>>
            : '-'
            = True;
        s.Else = False;
    };
    e.Else = False;
}

GetSymbolDomain {
    '{' = "LCB";
    '}' = "RCB";
    '<' = "LT";
    '>' = "GT";
    '(' = "LB";
    ')' = "RB";
    '=' = "EQ";
    ';' = "SEMICOLON";
    ':' = "COLON";
    ',' = "COMMA";
}

/* <MakeToken s.Domain t.Position e.Image> == t.Token */
MakeToken {
    s.Domain t.Position e.Image = (s.Domain t.Position t.Position e.Image);
}

$ENTRY lexer_TokenToString {
    (s.Domain t.Start t.End e.Attr) = (s.Domain '(' <PositionToString t.Start> '-' <PositionToString t.End> ')' ':' ' ' '"' e.Attr '"');
}

PositionToString {
    (s.Line s.Column) = <Symb s.Line> ':' <Symb s.Column>;
}

Move {
    e.Text (s.Line s.Column) = (s.Line s.Column);
}
