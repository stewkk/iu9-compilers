#+title: Scratch

* Задание
Построить синтаксический анализатор, который, принимая на входе текст на входном
языке, строит для него абстрактное синтаксическое дерево.

Грамматика входного языка должна быть описана в РБНФ с учётом приоритета и
ассоциативности операций. Синтаксический анализатор должен быть написан при
помощи методики рекурсивного спуска.

#+begin_src c++
/* Декартово произведение */
CartProd {
  (t.X e.X) (e.Y) = <CartProd-Bind t.X e.Y> <CartProd (e.X) (e.Y)>;
  (/* пусто */) (e.Y) = /* пусто */;
}

CartProd-Bind {
  t.X t.Y e.Y = (t.X t.Y) <CartProd-Bind t.X e.Y>;
  t.X /* пусто */ = /* пусто */;
}

/*
  Прибавление 1 к строковой записи числа:
  123 → 124, 99 → 100, 007 → 008
*/
Inc {
  e.Prefix s.Last, '0123456789' : e.1 s.Last s.Next e.2 = e.Prefix s.Next;
  e.Prefix '9' = <Inc e.Prefix> '0';
  /* пусто */ = '1';
}

/* Функция возвращает уникальные идентификаторы с заданным префиксом */
NextId {
  e.prefix
    , <Dg counter>
    : {
        s.n = e.prefix <Symb s.n> <Br counter '=' <Add 1 s.n>>;
        /* пусто */ = <Br counter '=' 0> <NextId e.prefix>;
      };
}
#+end_src

Чистый и на функциональном языке

* [X] Составление абстрактного синтаксиса языка.

#+begin_example
Program -> Function*
Function -> Name Body
Name -> IDENT
Body -> { Sentence+ }
Sentence -> Lhs Rhs ;
Lhs -> Pattern (, Result : Pattern)*
Rhs -> = Result | , Result : Body
Pattern -> PatternElement+
PatternElement -> Variable | STR | NUMBER | IDENT | \( Pattern \)
Result -> (PatternElement | Call)+
Variable -> (s | t | e) . (IDENT | NUMBER)
Call -> < Name Result >
#+end_example

* [X] Составление лексической структуры и конкретного синтаксиса языка в LL(1) РБНФ.

Лесические домены:

#+begin_example
VAR ::= (s|t|e)\.(IDENT|NUMBER)
STR ::= C string: 'abc', "abc\"\n"
IDENT ::= [a-zA-Z][a-zA-Z0-9_-]*
NUMBER ::= [0-9]+
{, }, <, >
#+end_example

LL(1) РБНФ:

#+begin_example
Program -> Function*
Function -> Name Body
Name -> IDENT
Body -> { Sentence+ }
Sentence -> Lhs Rhs ;
Lhs -> Pattern (, Result : Pattern)*
Rhs -> = Result | , Result : Body
Pattern -> PatternElement+
PatternElement -> Variable | STR | NUMBER | IDENT | \( Pattern \)
Result -> (PatternElement | Call)+
Variable -> VAR
Call -> < Name Result >
#+end_example

* [ ] Описание абстрактного синтаксического дерева при помощи типов данных выбранного студентом языка реализации.

* [ ] Написание лексического анализатора (можно использовать любой из ранее рассмотренных способов).

* [ ] Написание синтаксического анализатора методом рекурсивного спуска.
